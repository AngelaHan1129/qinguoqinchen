{
  "name": "qinguoqinchen-ai-2025",
  "version": "0.0.1",
  "description": "‰æµÂúã‰æµÂüé AI Á¥ÖÈöäÂ§öÊ®°ÊÖãÊª≤ÈÄèÊ∏¨Ë©¶ËàáÈò≤Á¶¶Ë©ï‰º∞Á≥ªÁµ±",
  "author": "‰æµÂúã‰æµÂüéÂúòÈöä",
  "private": true,
  "license": "MIT",
  "main": "src/main.js",
  "type": "commonjs",
  "scripts": {
    "format": "prettier --write \"**/*.js\"",
    "lint": "eslint \"{src,test,tests}/**/*.js\" --fix",
    "clean": "rimraf dist coverage allure-results allure-report test-results logs/temp",
    "start": "node src/main.js",
    "start:dev": "nodemon",
    "start:debug": "nodemon --inspect=0.0.0.0:9229",
    "start:prod": "cross-env NODE_ENV=production node src/main.js",
    "start:test": "cross-env NODE_ENV=test node src/main.js",
    "start:simple": "node simple-server.js",
    "start:simple-dev": "nodemon simple-server.js",
    "build": "echo JavaScript Â∞àÊ°àÁÑ°ÈúÄÁ∑®Ë≠Ø",
    "prebuild": "rimraf dist",
    "setup": "pnpm run setup:directories && pnpm run setup:env && pnpm run setup:tests",
    "setup:directories": "node -e \"const fs = require('fs'); ['logs', 'temp', 'uploads', 'cache', 'src/controllers', 'src/services', 'src/modules', 'src/config', 'tests', 'tests/api', 'tests/e2e', 'tests/fixtures', 'allure-results', 'test-results', 'scripts'].forEach(dir => { if (!fs.existsSync(dir)) { fs.mkdirSync(dir, { recursive: true }); console.log('‚úÖ Âª∫Á´ãÁõÆÈåÑ:', dir); } else { console.log('üìÅ ÁõÆÈåÑÂ∑≤Â≠òÂú®:', dir); } })\"",
    "setup:env": "node -e \"const fs = require('fs'); if (!fs.existsSync('.env')) { console.log('‚ö†Ô∏è  Ë´ãÂª∫Á´ã .env Ê™îÊ°à'); console.log('ÁØÑ‰æãÂÖßÂÆπÔºö'); console.log('NODE_ENV=development\\nPORT=7939\\nGROK_API_KEY=your_key\\nGEMINI_API_KEY=your_key'); } else { console.log('‚úÖ .env Ê™îÊ°àÂ≠òÂú®'); }\"",
    "setup:tests": "pnpm run setup:directories && pnpm run playwright:install",
    "setup:modules": "node scripts/setup-modules.js",
    "docker:up": "docker-compose up -d",
    "docker:down": "docker-compose down",
    "docker:logs": "docker-compose logs -f",
    "docker:restart": "docker-compose restart",
    "docker:clean": "docker-compose down -v --remove-orphans",
    "docker:build": "docker-compose build --no-cache",
    "docker:status": "docker-compose ps",
    "database:setup": "pnpm run database:postgres && pnpm run database:neo4j",
    "database:postgres": "node scripts/check-postgres.js",
    "database:neo4j": "node scripts/check-neo4j.js",
    "database:connect": "node scripts/test-database-connection.js",
    "test": "playwright test --reporter=allure-playwright",
    "posttest": "allure serve allure-results || pnpm exec allure serve allure-results",
    "test:watch": "playwright test --ui",
    "test:cov": "playwright test --reporter=html",
    "test:debug": "playwright test --debug",
    "test:unit": "playwright test --project unit --reporter=allure-playwright",
    "posttest:unit": "allure serve allure-results || pnpm exec allure serve allure-results",
    "test:e2e": "playwright test --project e2e --reporter=allure-playwright",
    "posttest:e2e": "allure serve allure-results || pnpm exec allure serve allure-results",
    "test:e2e:ui": "playwright test --project e2e --ui",
    "test:e2e:headed": "playwright test --project e2e --headed",
    "test:e2e:debug": "playwright test --project e2e --debug",
    "test:allure": "playwright test --reporter=allure-playwright",
    "posttest:allure": "allure serve allure-results || pnpm exec allure serve allure-results",
    "test:allure:open": "pnpm run test:allure && pnpm run allure:serve",
    "test:api": "playwright test tests/api --reporter=allure-playwright",
    "posttest:api": "allure serve allure-results || pnpm exec allure serve allure-results",
    "test:security": "playwright test tests/api/security-attacks.spec.js --reporter=allure-playwright",
    "posttest:security": "allure serve allure-results || pnpm exec allure serve allure-results",
    "test:penetration": "playwright test tests/api/penetration-test.spec.js --reporter=allure-playwright",
    "posttest:penetration": "allure serve allure-results || pnpm exec allure serve allure-results",
    "test:ai-analysis": "playwright test tests/api/ai-analysis.spec.js --reporter=allure-playwright",
    "posttest:ai-analysis": "allure serve allure-results || pnpm exec allure serve allure-results",
    "test:grok": "playwright test tests/api/grok-service.spec.js --reporter=allure-playwright",
    "posttest:grok": "allure serve allure-results || pnpm exec allure serve allure-results",
    "test:gemini": "playwright test tests/api/gemini-service.spec.js --reporter=allure-playwright",
    "posttest:gemini": "allure serve allure-results || pnpm exec allure serve allure-results",
    "test:vertex": "playwright test tests/api/vertex-ai.spec.js --reporter=allure-playwright",
    "posttest:vertex": "allure serve allure-results || pnpm exec allure serve allure-results",
    "test:neo4j": "playwright test tests/api/neo4j-service.spec.js --reporter=allure-playwright",
    "posttest:neo4j": "allure serve allure-results || pnpm exec allure serve allure-results",
    "test:controller": "playwright test tests/api/app.controller.spec.js --reporter=allure-playwright",
    "posttest:controller": "allure serve allure-results || pnpm exec allure serve allure-results",
    "test:controller:ui": "playwright test tests/api/app.controller.spec.js --ui",
    "test:controller:debug": "playwright test tests/api/app.controller.spec.js --debug",
    "test:load": "playwright test tests/load --reporter=allure-playwright",
    "posttest:load": "allure serve allure-results || pnpm exec allure serve allure-results",
    "test:performance": "playwright test tests/performance --reporter=allure-playwright",
    "posttest:performance": "allure serve allure-results || pnpm exec allure serve allure-results",
    "test:ci": "playwright test --reporter=allure-playwright,line,json",
    "test:full": "concurrently \"pnpm run start:test\" \"wait-on http://localhost:7939 && pnpm run test:allure\"",
    "test:force-report": "playwright test --reporter=allure-playwright; allure serve allure-results || pnpm exec allure serve allure-results",
    "test:unit:force-report": "playwright test --project unit --reporter=allure-playwright; allure serve allure-results || pnpm exec allure serve allure-results",
    "test:e2e:force-report": "playwright test --project e2e --reporter=allure-playwright; allure serve allure-results || pnpm exec allure serve allure-results",
    "test:api:force-report": "playwright test tests/api --reporter=allure-playwright; allure serve allure-results || pnpm exec allure serve allure-results",
    "test:security:force-report": "playwright test tests/api/security-attacks.spec.js --reporter=allure-playwright; allure serve allure-results || pnpm exec allure serve allure-results",
    "test:ai:force-report": "playwright test tests/api/ai-analysis.spec.js --reporter=allure-playwright; allure serve allure-results || pnpm exec allure serve allure-results",
    "allure:generate": "allure generate allure-results --clean -o allure-report || pnpm exec allure generate allure-results --clean -o allure-report",
    "allure:serve": "allure serve allure-results || pnpm exec allure serve allure-results",
    "allure:open": "allure open allure-report || pnpm exec allure open allure-report",
    "allure:clean": "rimraf allure-results allure-report",
    "allure:check": "node -e \"console.log('Ê™¢Êü• Allure ÁµêÊûúÁõÆÈåÑ...'); const fs = require('fs'); if (fs.existsSync('allure-results')) { console.log('‚úÖ allure-results ÁõÆÈåÑÂ≠òÂú®'); const files = fs.readdirSync('allure-results'); console.log('Ê™îÊ°àÊï∏Èáè:', files.length); files.slice(0, 5).forEach(file => console.log('  -', file)); } else { console.log('‚ùå allure-results ÁõÆÈåÑ‰∏çÂ≠òÂú®ÔºåË´ãÂÖàÂü∑Ë°åÊ∏¨Ë©¶'); }\"",
    "playwright:install": "playwright install",
    "playwright:install-deps": "playwright install-deps",
    "playwright:codegen": "playwright codegen http://localhost:7939",
    "playwright:version": "playwright --version || pnpm exec playwright --version",
    "docs:serve": "echo üöÄ ‰æµÂúã‰æµÂüé API ÊñáÊ™îÈÅãË°åÂú®: http://localhost:7939/api/docs",
    "docs:generate": "node scripts/generate-docs.js",
    "docs:open": "node -e \"const { exec } = require('child_process'); exec('start http://localhost:7939/api/docs');\"",
    "health:check": "node -e \"const http = require('http'); const req = http.get('http://localhost:7939/health', (res) => { let data = ''; res.on('data', chunk => data += chunk); res.on('end', () => { console.log('‚úÖ Á≥ªÁµ±ÂÅ•Â∫∑Ê™¢Êü•ÈÄöÈÅé', res.statusCode); console.log('ÂõûÊáâ:', data); }); }); req.on('error', (e) => { console.log('‚ùå Á≥ªÁµ±Êú™ÈÅãË°å:', e.message); });\"",
    "health:full": "node scripts/health-check.js",
    "health:services": "node scripts/check-all-services.js",
    "attack:demo": "node scripts/attack-demo.js",
    "attack:vectors": "node scripts/list-attack-vectors.js",
    "attack:simulate": "node scripts/simulate-attack.js",
    "attack:a1": "node scripts/attack-a1-stylegan.js",
    "attack:a2": "node scripts/attack-a2-stable-diffusion.js",
    "attack:a3": "node scripts/attack-a3-simswap.js",
    "attack:a4": "node scripts/attack-a4-diffusion-gan.js",
    "attack:a5": "node scripts/attack-a5-dalle.js",
    "attack:composite": "node scripts/attack-composite.js",
    "penetration:test": "node scripts/penetration-test.js",
    "penetration:full": "node scripts/full-penetration-test.js",
    "penetration:report": "node scripts/generate-penetration-report.js",
    "report:generate": "node scripts/generate-report.js",
    "report:penetration": "node scripts/penetration-report-api.js",
    "report:compliance": "node scripts/compliance-report.js",
    "rag:query": "node scripts/rag-query.js",
    "rag:test": "node scripts/test-rag-system.js",
    "system:stats": "node scripts/system-stats.js",
    "system:info": "node scripts/system-info.js",
    "system:monitor": "node scripts/system-monitor.js",
    "grok:test": "node scripts/test-grok-api.js",
    "grok:demo": "node scripts/grok-demo.js",
    "gemini:test": "node scripts/test-gemini-api.js",
    "gemini:demo": "node scripts/gemini-demo.js",
    "vertex:test": "node scripts/test-vertex-ai.js",
    "vertex:demo": "node scripts/vertex-demo.js",
    "neo4j:test": "node scripts/test-neo4j.js",
    "neo4j:demo": "node scripts/neo4j-demo.js",
    "ai:test-all": "concurrently \"pnpm run grok:test\" \"pnpm run gemini:test\" \"pnpm run vertex:test\"",
    "ai:demo-all": "pnpm run grok:demo && pnpm run gemini:demo && pnpm run vertex:demo",
    "ai:health": "node scripts/check-ai-services.js",
    "dev:full": "concurrently \"pnpm run docker:up\" \"pnpm run start:dev\"",
    "dev:setup": "pnpm run setup && pnpm run docker:up && pnpm run database:setup",
    "dev:clean": "pnpm run clean && pnpm run docker:clean",
    "dev:reset": "pnpm run dev:clean && pnpm run dev:setup",
    "logs:tail": "node scripts/tail-logs.js",
    "logs:error": "node scripts/error-logs.js",
    "logs:clear": "node scripts/clear-logs.js",
    "logs:watch": "node scripts/watch-logs.js",
    "demo:all": "pnpm run health:check && pnpm run attack:vectors && pnpm run system:stats",
    "demo:full": "pnpm run health:full && pnpm run attack:demo && pnpm run report:penetration",
    "demo:ai": "pnpm run ai:demo-all",
    "demo:attack": "pnpm run attack:composite",
    "demo:penetration": "pnpm run penetration:full",
    "benchmark": "node scripts/benchmark.js",
    "benchmark:full": "node scripts/full-benchmark.js",
    "security:audit": "node scripts/security-audit.js",
    "security:scan": "node scripts/security-scan.js",
    "vulnerability:scan": "node scripts/vulnerability-scan.js",
    "vulnerability:report": "node scripts/vulnerability-report.js",
    "report:allure": "pnpm run test:allure && pnpm run allure:generate",
    "report:open": "pnpm run allure:open",
    "report:serve": "pnpm run allure:serve",
    "report:security": "node scripts/security-report.js",
    "ci:test": "cross-env NODE_ENV=test concurrently \"pnpm run start:test\" \"wait-on http://localhost:7939 && pnpm run test:ci\"",
    "ci:setup": "pnpm run setup && pnpm run playwright:install-deps",
    "ci:full": "pnpm run ci:setup && pnpm run ci:test && pnpm run allure:generate",
    "ci:deploy": "pnpm run build && pnpm run test:ci && pnpm run start:prod",
    "quick:test": "pnpm run setup:tests && pnpm run test:allure && pnpm run allure:serve",
    "quick:start": "pnpm run setup:directories && pnpm run start:dev",
    "quick:demo": "pnpm run demo:all",
    "windows:fix": "echo ‰øÆÊ≠£ Windows Ë∑ØÂæëÂïèÈ°åÔºå‰ΩøÁî® pnpm exec Âü∑Ë°åÊâÄÊúâ allure ÂëΩ‰ª§",
    "windows:setup": "pnpm run setup:directories && pnpm run playwright:install && echo Windows Áí∞Â¢ÉË®≠ÂÆöÂÆåÊàê",
    "windows:test": "pnpm run test:force-report",
    "postinstall": "pnpm run setup:directories && pnpm run setup:modules",
    "prestart": "pnpm run setup:directories",
    "prestartdev": "pnpm run setup:directories",
    "validate": "node scripts/validate-environment.js",
    "validate:full": "node scripts/full-validation.js",
    "fix:permissions": "node scripts/fix-permissions.js",
    "fix:dependencies": "pnpm install --fix-lockfile",
    "update:deps": "pnpm update",
    "upgrade:all": "pnpm update --latest"
  },
  "dependencies": {
    "@google-cloud/aiplatform": "^5.7.0",
    "@google-cloud/discoveryengine": "^1.14.0",
    "@google-cloud/storage": "^7.17.2",
    "@google-cloud/vertexai": "^1.10.0",
    "@google/genai": "^1.24.0",
    "@google/generative-ai": "^0.24.1",
    "@nestjs/common": "^11.1.6",
    "@nestjs/config": "^4.0.2",
    "@nestjs/core": "^11.1.6",
    "@nestjs/jwt": "^11.0.0",
    "@nestjs/platform-express": "^11.1.6",
    "@nestjs/serve-static": "^4.0.2",
    "@nestjs/swagger": "^11.2.0",
    "@nestjs/terminus": "^11.0.0",
    "@nestjs/throttler": "^6.4.0",
    "@nestjs/typeorm": "^11.0.0",
    "axios": "^1.12.2",
    "bcryptjs": "^2.4.3",
    "class-transformer": "^0.5.1",
    "class-validator": "^0.14.2",
    "compression": "^1.7.4",
    "cors": "^2.8.5",
    "dotenv": "^16.4.5",
    "express": "^4.19.2",
    "express-rate-limit": "^7.2.0",
    "google-auth-library": "^10.4.0",
    "helmet": "^7.1.0",
    "jsonwebtoken": "^9.0.2",
    "morgan": "^1.10.0",
    "neo4j-driver": "^6.0.0",
    "openai": "^6.3.0",
    "pg": "^8.16.3",
    "redis": "^4.7.1",
    "reflect-metadata": "^0.2.0",
    "rxjs": "^7.8.1",
    "swagger-ui-express": "^5.0.1",
    "typeorm": "^0.3.27",
    "uuid": "^9.0.1",
    "winston": "^3.13.0",
    "winston-daily-rotate-file": "^5.0.0"
  },
  "devDependencies": {
    "@nestjs/cli": "^10.3.2",
    "@nestjs/schematics": "^10.1.1",
    "@nestjs/testing": "^11.1.6",
    "@playwright/test": "^1.56.0",
    "@types/bcryptjs": "^2.4.6",
    "@types/compression": "^1.7.5",
    "@types/cors": "^2.8.19",
    "@types/express": "^4.17.23",
    "@types/jsonwebtoken": "^9.0.10",
    "@types/morgan": "^1.9.10",
    "@types/node": "^24.7.1",
    "@types/pg": "^8.15.5",
    "@types/supertest": "^6.0.3",
    "@types/uuid": "^9.0.8",
    "allure-commandline": "^2.34.1",
    "allure-playwright": "^3.4.1",
    "concurrently": "^8.2.2",
    "cross-env": "^7.0.3",
    "eslint": "^9.14.0",
    "eslint-config-prettier": "^9.1.0",
    "eslint-plugin-prettier": "^5.1.3",
    "jest": "^29.7.0",
    "nodemon": "^3.1.0",
    "playwright": "^1.56.0",
    "prettier": "^3.2.0",
    "rimraf": "^5.0.7",
    "supertest": "^7.0.0",
    "ts-jest": "^29.4.4",
    "wait-on": "^8.0.0"
  },
  "nodemonConfig": {
    "watch": [
      "src"
    ],
    "ext": "js,json",
    "ignore": [
      "src/**/*.spec.js",
      "node_modules/**/*",
      "logs/**/*",
      "coverage/**/*",
      "allure-results/**/*",
      "allure-report/**/*",
      "test-results/**/*",
      "tests/**/*",
      "temp/**/*",
      "uploads/**/*",
      "cache/**/*"
    ],
    "exec": "node src/main.js",
    "delay": 1000,
    "env": {
      "NODE_ENV": "development"
    },
    "verbose": true,
    "restartable": "rs",
    "colours": true
  },
  "engines": {
    "node": ">=18.0.0",
    "pnpm": ">=8.0.0"
  },
  "packageManager": "pnpm@10.18.1",
  "repository": {
    "type": "git",
    "url": "https://github.com/qinguoqinchen/ai-penetration-system"
  },
  "keywords": [
    "ai",
    "security",
    "penetration-testing",
    "ekyc",
    "nestjs",
    "vertex-ai",
    "gemini",
    "grok",
    "deepfake",
    "stylegan3",
    "stable-diffusion",
    "simswap",
    "dall-e",
    "red-team",
    "cybersecurity",
    "biometric-security",
    "multi-modal-ai",
    "javascript",
    "pnpm",
    "playwright",
    "allure",
    "testing",
    "e2e",
    "neo4j",
    "postgresql",
    "knowledge-graph",
    "rag",
    "chinese",
    "taiwan",
    "competition",
    "innovation",
    "windows",
    "attack-vectors",
    "defense-evaluation",
    "compliance-assessment"
  ],
  "config": {
    "port": 7939,
    "test_port": 7940,
    "api_prefix": "api/v1",
    "swagger_path": "api/docs",
    "log_level": "info",
    "allure_results": "allure-results",
    "allure_report": "allure-report",
    "max_concurrent_tests": 5,
    "cache_ttl": 300,
    "session_timeout": 3600
  },
  "pnpm": {
    "overrides": {
      "semver": "^7.5.4",
      "axios": "^1.12.2",
      "eslint": "^9.14.0"
    },
    "peerDependencyRules": {
      "ignoreMissing": [
        "@types/*",
        "webpack"
      ],
      "allowedVersions": {
        "@nestjs/common": "11",
        "@nestjs/core": "11",
        "eslint": "9"
      }
    }
  },
  "playwright": {
    "version": "1.56.0",
    "config": "playwright.config.js"
  },
  "jest": {
    "testEnvironment": "node",
    "testMatch": [
      "**/__tests__/**/*.js",
      "**/?(*.)+(spec|test).js"
    ],
    "collectCoverageFrom": [
      "src/**/*.js",
      "!src/**/*.spec.js",
      "!src/main.js"
    ],
    "coverageDirectory": "coverage",
    "coverageReporters": [
      "text",
      "lcov",
      "html"
    ]
  },
  "prettier": {
    "semi": true,
    "trailingComma": "es5",
    "singleQuote": true,
    "printWidth": 100,
    "tabWidth": 2
  },
  "eslintConfig": {
    "extends": [
      "eslint:recommended",
      "prettier"
    ],
    "env": {
      "node": true,
      "es2022": true
    },
    "parserOptions": {
      "ecmaVersion": 2022,
      "sourceType": "module"
    }
  }
}